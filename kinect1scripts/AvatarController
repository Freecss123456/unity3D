##放在受控制游戏角色上##
using ...

//需要有Animator组件
[RequireComponent(typeof(Animator))]

//进入主要部分：AvatarController类的定义

public class AvatarController : MonoBehaviour
{
  [Tooltip("")] //变量提示
  一些public 变量
  [NonSerialized] //不在面板显示
  一些public 变量
  
  一些protected 变量
  
  一些private 变量
  
  函数 GetBoneTransformCount()
  {
    返回bone数组的长度（bone.Length）
  }
  
  函数 GetBoneTransform(int index)
  {
    返回指定的bone（bones[index]）
  }
  
  函数 GetBoneIndexByJoint(KinectInterop.JointType joint, bool bMirrored)
  {
    根据joint返回对应的bone的索引（boneIndex = jointMap2boneIndex[joint]）
    //bMirrored 决定是否镜像
  }
  
  函数 GetSpecIndexByJoint(KinectInterop.JointType joint1, KinectInterop.JointType joint2, bool bMirrored)
  {
    //作用未知
    //根据特定的joint1和joint2组合返回boneIndex
  }

 /*****************************************************************************/
  主要函数 Awake()
  {
    //设置人物手臂为T形
    SetModelArmsInTpose();
    //初始化bone,bone将与模型各关节对应
    bones = new Transform[31];
    //初始化bone的角度和方向
    initialRotations = new Quaternion[bones.Length];
    //将bone与kinect捕捉到的point映射
    MapBones();
    //
    isRigidBody = gameObject.GetComponent<Rigidbody>();
  }
 
/*****************************************************************************/
  函数 UpdateAvatar(Int64 UserID)
  {
    //将模型移动到kinect位置(externalRootMotion:Avatar是否被其他脚本应用)
    if(!externalRootMotion){MoveAvatar(UserID);}
    
    //通过遍历将boneIndex2JointMap[boneIndex]->joint,再TransformBone(...)
    //某些骨骼通过specIndex2JointMap[boneIndex]->alJoints,再TransformSpecialBone(...)
    for (boneIndex = 0; boneIndex < bones.Length; boneIndex++)
    {...}
  }
  
  函数 ResetToInitialPosition()
  {
  
  }

  函数 SuccessfulCalibration(Int64 userId)
  {
  
  }
  
 /*****************************************************************************/
  函数 TransformBone(Int64 userId, KinectInterop.JointType joint, int boneIndex, bool flip)
  {
    //根据boneIndex 获取人物模型对应关节
    Transform boneTransform = bones[boneIndex];
    //得到joint对应的真人关节方位
    Quaternion jointRotation = kinectManager.GetJointOrientation(userId, iJoint, flip);
    //计算人物模型关节新的方位
    Quaternion newRotation = Kinect2AvatarRot(jointRotation, boneIndex);
    //转化关节角度
    boneTransform.rotation = newRotation; //平滑方式：Quaternion.Slerp(boneTransform.rotation, newRotation, smoothFactor * Time.deltaTime);
  }

 /*****************************************************************************/
   函数 MoveAvatar(Int64 UserID)
   {
     //得到UserID对应的脊柱位置
     Vector3 trans = kinectManager.GetUserPosition(UserID);
     //不懂待完善
     ...
   }
   
 /*****************************************************************************/
   函数 SetModelArmsInTpose() //将人物模型初始化为T形
   {
    //得到人物模型组件animator
    Animator animator = GetComponent<Animator>();
    //得到人物模型的 标准左方向 向量vTposeLeftDir
    Vector3 vTposeLeftDir = transform.TransformDirection(Vector3.left);
		
    //得到人物模型左臂的三个关节
		Transform transLeftUarm = animator.GetBoneTransform(HumanBodyBones.LeftUpperArm);
		Transform transLeftLarm = animator.GetBoneTransform(HumanBodyBones.LeftLowerArm);
		Transform transLeftHand = animator.GetBoneTransform(HumanBodyBones.LeftHand);
		
    //如果关节不为空
		if(transLeftUarm != null && transLeftLarm != null)
		{
      //计算上臂的方向vUarmLeftDir
      Vector3 vUarmLeftDir = transLeftLarm.position - transLeftUarm.position;
      //计算 上臂方向 与 标准左方向 的夹角fUarmLeftAngle
			float fUarmLeftAngle = Vector3.Angle(vUarmLeftDir, vTposeLeftDir);
			//如果夹角大于5°
			if(Mathf.Abs(fUarmLeftAngle) >= 5f)
			{
        //旋转上臂至 标准左方向
				Quaternion vFixRotation = Quaternion.FromToRotation(vUarmLeftDir, vTposeLeftDir);
				transLeftUarm.rotation = vFixRotation * transLeftUarm.rotation;
			}
      //前臂的处理同上
      if(transLeftHand != null)
      {
        ...
      }
    }
            
    //右臂的处理同上
    /*...*/
   }
   
  /*****************************************************************************/
  
}
